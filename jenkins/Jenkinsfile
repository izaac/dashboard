#!groovy

def deleteContainer = "${job_name}${BUILD_NUMBER}_delete"
def deletePytestOptions = "-k test_delete_rancher_server"
def deleteResultsOut = "delete-results.xml"
def testsDir = "tests/v3_api/"
def e2eContainerName = "cye2e-${job_name}${env.BUILD_NUMBER}"
def rancherContainerName = "rancher-${job_name}${env.BUILD_NUMBER}"
def envFile = ".env"
def DEPENDENCIES_INSTALLED = false

def branch = "master"
if ("${env.branch}" != "null" && "${env.branch}" != "") {
  branch = "${env.branch}"
}

node {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
    withFolderProperties {
      paramsMap = []
      params.each {
        paramsMap << "$it.key=$it.value"
      }
      withEnv(paramsMap) {
        stage('Checkout') {
          deleteDir()
          checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${branch}"]],
                    extensions: scm.extensions + [[$class: 'CleanCheckout']],
                    userRemoteConfigs: scm.userRemoteConfigs
                  ])
        }

        try {
          try {
            stage('Setup Dependencies') {
                sh "jenkins/setup.sh"
                DEPENDENCIES_INSTALLED = true
            }
          } catch (err) {
              DEPENDENCIES_INSTALLED = false
              echo "Error: " + err
              currentBuild.result = 'FAILURE'
              error()
          }
          try {
            stage('Run E2E Tests') {
              environment {
                RANCHER_CONTAINER_NAME = rancherContainerName
                CYPRESS_CONTAINER_NAME = e2eContainerName
              }
              sh "jenkins/run.sh"
              TEST_IMAGES_CREATED = true
             }
          } catch (err) {
              TEST_IMAGES_CREATED = false
              echo "Error: " + err
              currentBuild.result = 'FAILURE'
              error()
          }
             
        } catch(err) {
          echo "Error: " + err
        } finally {
          stage('Teardown Images') {
            try {
              if (DEPENDENCIES_INSTALLED && TEST_IMAGES_CREATED) {
                sh "docker stop ${RANCHER_CONTAINER_NAME}"
                sh "docker stop ${CYPRESS_CONTAINER_NAME}"
                sh "docker rm ${RANCHER_CONTAINER_NAME}"
                sh "docker rm ${CYPRESS_CONTAINER_NAME}"
              }
              else {
                echo "Rancher server and Cypress not deployed, skipping delete."
              }
            } catch(err) {
              echo "Error: " + err
              currentBuild.result = 'FAILURE'
            }
          }

          stage('Test Report') {
            step([$class: 'JUnitResultArchiver', testResults: '**/junit.xml'])
          }

          stage('Cleanup') {
            environment {
                RANCHER_CONTAINER_NAME = rancherContainerName
                CYPRESS_CONTAINER_NAME = e2eContainerName
            }
            sh "jenkins/cleanup.sh"
          }
        }
      }
    }
  }  
}